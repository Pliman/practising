<HTML xmlns:v>
<HEAD>
<META http-equiv='Content-Type' content='text/html;charset=gb2312'>
<TITLE>group集合容器</TITLE>
<META name='Gemeratpr' content='网络程序员伴侣(Lshdic)2005'>
<link rel=stylesheet href="css.css" type="text/css">
<script language='javascript' src='js.js'></script>
</HEAD>
<BODY>
<v:background id='bk1'></v:background>
<div id='menudiv1' style='text-align:center' class=menu1></div>
<base target='_blank'>
<pre>
<span>1:group集合容器 - 实例讲解</span>

该标记不是用来输出某种图形的、运行时其本身也不可见，而且也没有专用属性，只有VML通用属性，但却也是非常重要的、特殊的VML标记。它的作用就是充当“类似父或母”的身份将多个“类似儿女成员”的图形囊括其中，然后你可以单独性的描述“父母”，不必一个一个去控制“单个子女”，从而实现“全员子女”继承“父母”遗传的id, class, style (top, left, width, height, rotation, z-index, position, visibility, display), title, href, target, alt, coordsize, coordorigin等等属性。而我们以后实际应用，最重要的是让“子女”继承CSS-style()括号里的属性。

先看一个例子:
<textarea>
<HTML xmlns:v><STYLE>v\:*{behavior:url(#default#VML);}</STYLE><BODY>
<v:group id="group1" style='position:absolute;left:0;top:0;z-index:1;width:100;height:100' coordsize="100,100">

<v:oval style="LEFT:100;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="white"/>
<v:rect style="LEFT:200;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="yellow"/>
<v:rect style="LEFT:100;TOP:200;WIDTH:80;HEIGHT:80" fillcolor="red"/>
<v:arc style="LEFT:200;TOP:200;WIDTH:80;HEIGHT:80" startangle="360" endangle="167" fillcolor="blue"/>

</v:group>
</textarea>

以上例子也许较难理解，不过我会详细解释。group标记我们用id命名为group1，CSS定义了position:absolute;，表示它是Vector3D的形式输出网页。z-index:1;定义了3D高度为1，left:0;top:0;表示它位于网页的X位置=0、Y位置=0。width:100;height:100、coordsize="100,100"综合我们前面shape多边形那课讲的知识，知道它的大小是100%，也不放大、也不缩小、与coordsize虚拟容器空间大小持平。

在看它包含的4个子女图形标记，均没有position:absolute;的Vector3D输出定义。但运行效果证明，它们继承了group1的position:absolute;定义，同样均以Vector3D形式输出。

在看4个子女的left:;top:;width:;height:;，也许你会问输出距离页面XY位置、宽度、高度效果均是正常值，似乎没有继承ground1？那么你在对比下面的例子，就发现这个例子却继承了。

<textarea>
<HTML xmlns:v><STYLE>v\:*{behavior:url(#default#VML);}</STYLE><BODY>
<v:group id="group1" style='position:absolute;left:200;top:50;z-index:1;width:100;height:100' coordsize="100,100">

<v:oval style="LEFT:100;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="white"/>
<v:rect style="LEFT:200;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="yellow"/>
<v:rect style="LEFT:100;TOP:200;WIDTH:80;HEIGHT:80" fillcolor="red"/>
<v:arc style="LEFT:200;TOP:200;WIDTH:80;HEIGHT:80" startangle="360" endangle="167" fillcolor="blue"/>

</v:group>
</textarea>

怎么样？这例group1的left为200、top为50。你发现相比第一个例子，这个例子所有4个子女图形的页面位置X均增加了200、页面位置Y均增加了50。而例1中group1的left为0、top为0，也就是“父母”没有“财产”遗传给“子女”……

现在你恍然大悟学会group标记了？恭喜，其实group“父母”与“子女”的故事就是这么一会事……。在看看下例，不就所有子女都放大两倍了？

<textarea>
<HTML xmlns:v><STYLE>v\:*{behavior:url(#default#VML);}</STYLE><BODY>
<v:group id="group1" style='position:absolute;left:200;top:50;z-index:1;width:200;height:200' coordsize="100,100">

<v:oval style="LEFT:100;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="white"/>
<v:rect style="LEFT:200;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="yellow"/>
<v:rect style="LEFT:100;TOP:200;WIDTH:80;HEIGHT:80" fillcolor="red"/>
<v:arc style="LEFT:200;TOP:200;WIDTH:80;HEIGHT:80" startangle="360" endangle="167" fillcolor="blue"/>

</v:group>
</textarea>

<span>2:group集合容器 - DVML编程批处理的好助手</span>

至于DVML编程，现在不到正式讲解的时候，我只简单的在这里介绍一下，因为group是DVML编程时批处理图形的好助手

DVML是我自己给VML系列编程起的名字，全名为DHTML VML，DVML是简写。DVML编程是干什么的？因为内容比较复杂、现在我不说、以后会在DVML编程一章详细讨论。我只给个DVML最简单的例子，让你少稍稍了解一下程序是什么，聪明人不用我说明，也会看出group对于编程时批处理图形的便利。

<textarea>
<HTML xmlns:v><STYLE>v\:*{behavior:url(#default#VML);}</STYLE><BODY>
<v:group id="group1" style='position:absolute;left:200;top:50;z-index:1;width:100;height:100' coordsize="100,100">

<v:oval style="LEFT:100;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="white"/>
<v:rect style="LEFT:200;TOP:100;WIDTH:50;HEIGHT:50" fillcolor="yellow"/>
<v:rect style="LEFT:100;TOP:200;WIDTH:80;HEIGHT:80" fillcolor="red"/>
<v:arc style="LEFT:200;TOP:200;WIDTH:80;HEIGHT:80" startangle="360" endangle="167" fillcolor="blue"/>

</v:group>
<input type=button value=按我向左移全部图形 onclick="group1.style.left=parseInt(group1.style.left)-10">
<input type=button value=按我向右移全部图形 onclick="group1.style.left=parseInt(group1.style.left)+10">
<input type=button value=按我向放大全部图形 onclick="group1.style.width=parseInt(group1.style.width)+10;group1.style.height=parseInt(group1.style.height)+10;">
<input type=button value=按我向缩小全部图形 onclick="group1.style.width=parseInt(group1.style.width)-10;group1.style.height=parseInt(group1.style.height)-10;">
</textarea>

这就是程序、这就是DVML编程的一个简单实例。没有group集合容器，DVML编程只能一个个很烦琐的去操作图形。而VML的强大不会让上述事情发生，以后当你学会了DVML编程，别忘记了在适当的时候选择使用group集合容器，这可以提高程序运行效率、简化DVML编程的烦琐、行之有效的实现批处理图形。