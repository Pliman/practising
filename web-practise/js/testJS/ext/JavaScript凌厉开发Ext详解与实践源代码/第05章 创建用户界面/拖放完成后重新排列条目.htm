<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>拖放完成后重新排列条目</title>
        <script src="../../extjs/ext-base.js">
        </script>
        <script src="../../extjs/ext-all.js">
        </script>
        <script>
            Ext.onReady(function(){
                //投下区域（DropZone）本身也是承载其他条目的容器
                var dz1 = new Ext.dd.DropZone('dd1-ct', {
                    ddGroup: 'group'
                });
                var dz2 = new Ext.dd.DropZone('dd2-ct', {
                    ddGroup: 'group'
                });
                
                //条目组一
                var dd11 = Ext.get('dd1-item1');
                dd11.dd = new Ext.dd.DDProxy('dd1-item1', 'group');
                
                var dd12 = Ext.get('dd1-item2');
                dd12.dd = new Ext.dd.DDProxy('dd1-item2', 'group');
                
                var dd13 = Ext.get('dd1-item3');
                dd13.dd = new Ext.dd.DDProxy('dd1-item3', 'group');
                
                
                // 条目组二
                var dd21 = Ext.get('dd2-item1');
                dd21.dd = new Ext.dd.DDProxy('dd2-item1', 'group');
                
                var dd22 = Ext.get('dd2-item2');
                dd22.dd = new Ext.dd.DDProxy('dd2-item2', 'group');
                
                var dd23 = Ext.get('dd2-item3');
                dd23.dd = new Ext.dd.DDProxy('dd2-item3', 'group');
                
                Ext.override(Ext.dd.DDProxy, {
                    startDrag: function(x, y){
                        var el = Ext.get(this.getEl()); //初始的拖动元素
                        var dragEl = Ext.get(this.getDragEl());//正在被拖动的元素，代理元素
                        //applyStyles方法设置样式，不显示边框并设底色为黄色
                        dragEl.applyStyles({
                            border: '',
                            'z-index': 2000,
                            'background': 'yellow'
                        });
                        dragEl.update(el.dom.innerHTML + "正在被拖动中");
                        dragEl.addClass(el.dom.className + ' dd-proxy'); //用CSS设置透明度
                    },
					//新加入的两个onDragOver（进入拖动目标区域时）、onDragOut（离开拖动目标区域时）方法
                    onDragOver: function(e, targetId){
                        //参数targetId是拖动到任何一个HTML元素都会报告的那个id
						//当前我们需要的是'dd1-ct'和'dd2-ct'任意一个作为有效的容器
						//你可以用console.log('dragOver: ' + targetId);观察沿途所经过的HTML元素id
                        if (targetId === 'dd1-ct' || targetId === 'dd2-ct') {
                            var target = Ext.get(targetId);
                            this.lastTarget = target; 
                            target.addClass('dd-over'); //作高亮显示
                        }
                    },
                    onDragOut: function(e, targetId){
                        //console.log('dragOut: ' + targetId);
                        if ('dd1-ct' === targetId || 'dd2-ct' === targetId) {
                            var target = Ext.get(targetId);
                            this.lastTarget = null;
                            target.removeClass('dd-over'); //离开时取消高亮显示
                        }
                    },
					endDrag: function() {
					    var dragEl = Ext.get(this.getDragEl());
					    var el = Ext.get(this.getEl());
					    if(this.lastTarget) {
							
					        Ext.get(this.lastTarget).appendChild(el);//允许置下的DropZone对象追加元素
					        el.applyStyles({position:'', width:''});
					    }
					    else {
					        el.applyStyles({position:'absolute'});//拖动目标不在DropZone范围内，就地停留。
					        el.setXY(dragEl.getXY());
					        el.setWidth(dragEl.getWidth());
					    }
					    Ext.get('dd1-ct').removeClass('dd-over'); 
					    Ext.get('dd2-ct').removeClass('dd-over');
					}
                });
            });
        </script>
        <link rel="stylesheet" type="text/css" href="../../extjs/resources/css/ext-all.css" />
        <style type="text/css">
            body {
                font-size: 11px;
            }
            
            .dd-ct {
                position: absolute;
                border: 1px solid silver;
                width: 180px;
                height: 180px;
                top: 32px;
                background-color: #ffffc0;
            }
            
            #dd1-ct {
                left: 64px;
            }
            
            #dd2-ct {
                left: 256px;
            }
            
            .dd-item {
                height: 18px;
                border: 1px solid #a0a0a0;
                background-color: #c4d0ff;
                vertical-align: middle;
                cursor: move;
                padding: 2px;
                z-index: 1000;
            }
            
            .dd-ct .dd-item {
                margin: 2px;
            }
            
            .dd-proxy {
                opacity: 0.4;
                -moz-opacity: 0.4;
            }
            
            .dd-over {
                background-color: #ffff60;
            }
        </style>
    </head>
    <body>
        <div class="dd-ct" id="dd1-ct">
            <div class="dd-item" id="dd1-item1">
                条目 1.1
            </div>
            <div class="dd-item" id="dd1-item2">
                条目 1.2
            </div>
            <div class="dd-item" id="dd1-item3">
                条目 1.3
            </div>
        </div>
        <!--新添加的标签-->
        <div class="dd-ct" id="dd2-ct">
            <div class="dd-item" id="dd2-item1">
                条目 2.1
            </div>
            <div class="dd-item" id="dd2-item2">
                条目 2.2
            </div>
            <div class="dd-item" id="dd2-item3">
                条目 2.3
            </div>
        </div>
    </body>
</html>
